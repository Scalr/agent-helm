{{- if not .Values.jobWorker }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: "{{ include "agent-k8s.fullname" . }}-worker"
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "agent-k8s.labels" . | nindent 4 }}
    app.kubernetes.io/component: worker
spec:
  selector:
    matchLabels:
      {{- include "agent-k8s.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
      {{- with (merge (deepCopy .Values.podAnnotations) .Values.workerPodAnnotations) }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
        checksum/secrets: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
      labels:
        {{- include "agent-k8s.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "agent-k8s.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.serviceAccount.automountToken }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: agent-k8s
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          env:
            - name: SCALR_URL
              value: {{ .Values.agent.url | quote }}
            - name: SCALR_AGENT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.agent.tokenExistingSecret | default (include "agent-k8s.name" .) }}
                  key: {{ .Values.agent.tokenExistingSecretKey | default "token" }}
                  optional: false
            - name: SCALR_AGENT_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SCALR_AGENT_KUBERNETES_MODE
              value: "worker"
            {{- if .Values.efsVolumeHandle }}
            - name: SCALR_AGENT_KUBERNETES_EFS_CLAIM_NAME
              value: "agent-k8s-efs-claim"
            {{- end }}
            {{- if .Values.jobWorker }}
            - name: SCALR_AGENT_DATA_DIR
              value: "{{ .Values.agent.dataDir }}"
            {{- else }}
            - name: SCALR_AGENT_DATA_DIR
              value: "{{ .Values.agent.data_home }}"
            {{- end }}
            - name: SCALR_AGENT_LOG_FORMAT
              value: "{{ .Values.agent.log_format }}"
            - name: SCALR_AGENT_DEBUG
              value: "{{ .Values.agent.debug }}"
            - name: SCALR_AGENT_WORKER_ON_STOP_ACTION
              value: "{{ .Values.agent.worker_on_stop_action }}"
            - name: SCALR_AGENT_WORKER_DRAIN_TIMEOUT
              value: "{{ .Values.agent.worker_drain_timeout }}"
            - name: SCALR_AGENT_WORKER_GRACE_SHUTDOWN_TIMEOUT
              value: "{{ .Values.agent.grace_shutdown_timeout }}"
            - name: SCALR_AGENT_DISCONNECT_ON_STOP
              value: "{{ .Values.agent.disconnect_on_stop }}"
            - name: SCALR_AGENT_CA_CERT
              value: "{{ .Values.agent.ca_cert }}"
            - name: SCALR_AGENT_CONTAINER_TASK_SCHEDULING_TIMEOUT
              value: "{{ .Values.agent.container_task_scheduling_timeout }}"
            - name: SCALR_AGENT_CONTAINER_TASK_ACQUIRE_TIMEOUT
              value: "{{ .Values.agent.container_task_acquire_timeout }}"
            - name: SCALR_AGENT_CONTAINER_TASK_CPU_REQUEST
              value: "{{ .Values.agent.container_task_cpu_request }}"
            - name: SCALR_AGENT_CONTAINER_TASK_CPU_LIMIT
              value: "{{ .Values.agent.container_task_cpu_limit }}"
            - name: SCALR_AGENT_CONTAINER_TASK_MEM_REQUEST
              value: "{{ .Values.agent.container_task_mem_request }}"
            - name: SCALR_AGENT_CONTAINER_TASK_MEM_LIMIT
              value: "{{ .Values.agent.container_task_mem_limit }}"
            - name: SCALR_AGENT_CONTAINER_TASK_CA_CERT
              value: "{{ .Values.agent.container_task_ca_cert }}"
            - name: SCALR_AGENT_CONTAINER_TASK_IMAGE_REGISTRY
              value: "{{ .Values.agent.container_task_image_registry }}"
            - name: SCALR_AGENT_PROVIDER_CACHE_SIZE_LIMIT_MB
              value: "{{ .Values.agent.gc_plugins_global_size_limit }}"
            {{- if .Values.extraEnv }}
            {{- range $key, $value := .Values.extraEnv }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: data-home
              mountPath: "{{ .Values.agent.data_home }}"
      {{- with .Values.workerNodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.workerTolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: data-home
          {{- if .Values.efsVolumeHandle }}
          persistentVolumeClaim:
            claimName: agent-k8s-efs-claim
          {{- else }}
          hostPath:
            path: {{ .Values.agent.data_home }}
            type: DirectoryOrCreate
          {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
{{- else }}
apiVersion: scalr.io/v1
kind: AgentWorker
metadata:
  name: scalr-agent-worker
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "agent-k8s.labels" . | nindent 4 }}
    app.kubernetes.io/component: worker
spec:
  jobTemplate:
    spec:
      backoffLimit: 0
      ttlSecondsAfterFinished: 60 # delete 1 minute after finish
      template:
        spec:
          restartPolicy: Never
          {{- with .Values.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          serviceAccountName: {{ include "agent-k8s.serviceAccountName" . }}
          automountServiceAccountToken: false
          {{- with .Values.podSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          containers:
          - name: worker
            image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
            imagePullPolicy: {{ .Values.image.pullPolicy }}
            command: ["python", "-m", "tacoagent.cmd", "run"]
            volumeMounts:
              - name: sa-token
                mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                readOnly: true
              {{- if .Values.persistence.enabled }}
              - name: cache
                mountPath: {{ .Values.agent.dataDir }}/bin
                subPath: {{ printf "%s/bin" (default "" .Values.persistence.persistentVolumeClaim.subPath) | trimPrefix "/" | quote }}
              - name: cache
                mountPath: {{ .Values.agent.dataDir }}/providers
                subPath: {{ printf "%s/providers" (default "" .Values.persistence.persistentVolumeClaim.subPath) | trimPrefix "/" | quote }}
              - name: cache
                mountPath: {{ .Values.agent.dataDir }}/providers-metadata
                subPath: {{ printf "%s/providers-metadata" (default "" .Values.persistence.persistentVolumeClaim.subPath) | trimPrefix "/" | quote }}
              - name: cache
                mountPath: {{ .Values.agent.dataDir }}/providers-downloads
                subPath: {{ printf "%s/providers-downloads" (default "" .Values.persistence.persistentVolumeClaim.subPath) | trimPrefix "/" | quote }}
              {{- end }}
          initContainers:
          - name: runner
            image: "{{ .Values.runnerImage.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
            imagePullPolicy: {{ .Values.runnerImage.pullPolicy }}
            command: ["/bin/sh", "/opt/scalr-agent/tacoagent/driver/exec_loop.sh"]
            workingDir: /opt/workdir
            # When a container in initContainers has restartPolicy: Always,
            # it is treated as a sidecar. Kubernetes v1.29 is required.
            restartPolicy: Always
            volumeMounts:
              {{- if .Values.persistence.enabled }}
              - name: cache
                mountPath: /opt/bin
                subPath: {{ printf "%s/bin" (default "" .Values.persistence.persistentVolumeClaim.subPath) | trimPrefix "/" | quote }}
              - name: cache
                mountPath: /opt/plugin-cache
                subPath: {{ printf "%s/providers" (default "" .Values.persistence.persistentVolumeClaim.subPath) | trimPrefix "/" | quote }}
              {{- end }}
            readinessProbe:
              exec:
                command: ["/bin/sh", "-c", "[ -f /tmp/exec-loop/health ]"]
              initialDelaySeconds: 0
              periodSeconds: 1
              timeoutSeconds: 1
              failureThreshold: 1
              successThreshold: 1
          volumes:
            - name: sa-token
              projected:
                sources:
                  - serviceAccountToken:
                      path: token
                      expirationSeconds: {{ .Values.serviceAccount.tokenTTL | default 3600 }}
                  - configMap:
                      name: kube-root-ca.crt
                      items:
                        - key: ca.crt
                          path: ca.crt
                  - downwardAPI:
                      items:
                        - path: namespace
                          fieldRef:
                            fieldPath: metadata.namespace
            {{- if .Values.persistence.enabled }}
            - name: cache
              persistentVolumeClaim:
                claimName: {{ .Values.persistence.persistentVolumeClaim.claimName | default (include "agent-k8s.fullname" .) }}
            {{- end }}
      {{- with .Values.workerNodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 12 }}
      {{- end }}
      {{- with .Values.workerTolerations }}
      tolerations:
        {{- toYaml . | nindent 12 }}
      {{- end }}
{{- end }}
